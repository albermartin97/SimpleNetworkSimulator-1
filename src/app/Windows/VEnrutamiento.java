
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package app.Windows;

import app.Elements.SimulatorItem;
import java.util.List;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import material.graphs.Edge;
import material.graphs.Vertex;
import objects.Linker;
import objects.Router;
import objects.Node;
import app.Elements.NodeItem;
import javax.swing.JOptionPane;

/**
 *
 * @author alber
 */
public class VEnrutamiento extends javax.swing.JFrame {

    private SimulatorItem si;
    private VMain vMain;
    private VTraceStepByStep vTraceStepByStep;
    private String[] linkers;
    private boolean anyRandom;

    /**
     * Creates new form VEnrutamiento
     */
    public VEnrutamiento() {
        initComponents();
        setLocation((getToolkit().getScreenSize().width - this.getWidth()) / 2,
                (getToolkit().getScreenSize().height - this.getHeight()) / 2);
    }

    public VEnrutamiento(VMain vMain,boolean anyRandom, boolean routing) {
        this.si = vMain.getSI();
        this.vMain = vMain;
        this.anyRandom = anyRandom;
        String[] linkers = new String[si.getSimulator().getRed().getRed().edges()
                .size()];
        int i = 0;
        for (Edge<objects.Linker> eL : si.getSimulator().getRed().getRed().edges()) {
            linkers[i] = eL.getElement().getIp();
            i++;
        }
        this.linkers = linkers;
        initComponents();
        configComponents(routing);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        workSpacePanel1 = new app.Elements.WorkSpacePanel();
        jConfTablaEnrutamiento = new javax.swing.JPanel();
        jSPHostTable = new javax.swing.JScrollPane();
        jtHostTable = new javax.swing.JTable(){
            public boolean isCellEditable(int row, int column){
                if(column == 0){
                    return false;
                }
                return true;
            }
        };
        btnAceptarEnrutamiento = new javax.swing.JButton();
        btnCancelarEnrutamiento = new javax.swing.JButton();
        jToolBar1 = new javax.swing.JToolBar();
        btnEnrutamientoAutomatico = new javax.swing.JButton();

        javax.swing.GroupLayout workSpacePanel1Layout = new javax.swing.GroupLayout(workSpacePanel1);
        workSpacePanel1.setLayout(workSpacePanel1Layout);
        workSpacePanel1Layout.setHorizontalGroup(
            workSpacePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        workSpacePanel1Layout.setVerticalGroup(
            workSpacePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("app/Windows/Bundle"); // NOI18N
        setTitle(bundle.getString("VEnrutamiento.title")); // NOI18N
        setAlwaysOnTop(true);
        setMinimumSize(new java.awt.Dimension(555, 439));

        List<Vertex<objects.Node>> vhListComputers = this.si.getSimulator().getRed()
        .getAllHosts();
        List<Vertex<objects.Node>> vhListRouters = this.si.getSimulator().getRed()
        .getAllRouters();

        Object[][] rowData = new Object[vhListComputers.size()][vhListRouters.size() + 1];
        String[] columnNames = new String[vhListRouters.size() + 1];
        columnNames[0] = "Hosts";
        int i = 0;
        int j = 1;

        for (Vertex<objects.Node> vHC : vhListComputers) {
            rowData[i][0] = vHC.getElement().getName();
            for (Vertex<objects.Node> vHR : vhListRouters) {
                columnNames[j] = vHR.getElement().getName();
                j++;
            }
            j = 1;
            i++;
        }
        jtHostTable.setModel(new javax.swing.table.DefaultTableModel(
            rowData,
            columnNames
        ));
        for(int m = 1; m <= vhListRouters.size(); m++){
            JComboBox<String> comboBox = new JComboBox<>(this.linkers);
            TableColumn column = jtHostTable.getColumnModel().getColumn(m);
            column.setCellEditor(new DefaultCellEditor(comboBox));
            DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
            renderer.setToolTipText("Click for combo box");
            column.setCellRenderer(renderer);
        }
        jtHostTable.getColumnModel().getColumn(0).setCellRenderer(
            jtHostTable.getTableHeader().getDefaultRenderer());
        jtHostTable.getTableHeader().setReorderingAllowed(false);
        jSPHostTable.setViewportView(jtHostTable);

        btnAceptarEnrutamiento.setText(bundle.getString("VEnrutamiento.btnAceptarEnrutamiento.text")); // NOI18N
        btnAceptarEnrutamiento.setToolTipText(bundle.getString("VEnrutamiento.btnAceptarEnrutamiento.toolTipText")); // NOI18N
        btnAceptarEnrutamiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarEnrutamientoActionPerformed(evt);
            }
        });

        btnCancelarEnrutamiento.setText(bundle.getString("VEnrutamiento.btnCancelarEnrutamiento.text")); // NOI18N
        btnCancelarEnrutamiento.setToolTipText(bundle.getString("VEnrutamiento.btnCancelarEnrutamiento.toolTipText")); // NOI18N
        btnCancelarEnrutamiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarEnrutamientoActionPerformed(evt);
            }
        });

        jToolBar1.setFloatable(false);
        jToolBar1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jToolBar1.setRollover(true);

        btnEnrutamientoAutomatico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/routingIcon.png"))); // NOI18N
        btnEnrutamientoAutomatico.setToolTipText(bundle.getString("VEnrutamiento.btnEnrutamientoAutomatico.toolTipText")); // NOI18N
        btnEnrutamientoAutomatico.setFocusable(false);
        btnEnrutamientoAutomatico.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEnrutamientoAutomatico.setMargin(new java.awt.Insets(8, 20, 8, 20));
        btnEnrutamientoAutomatico.setMaximumSize(new java.awt.Dimension(73, 51));
        btnEnrutamientoAutomatico.setMinimumSize(new java.awt.Dimension(73, 51));
        btnEnrutamientoAutomatico.setPreferredSize(new java.awt.Dimension(73, 51));
        btnEnrutamientoAutomatico.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEnrutamientoAutomatico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnrutamientoAutomaticoActionPerformed(evt);
            }
        });
        jToolBar1.add(btnEnrutamientoAutomatico);

        javax.swing.GroupLayout jConfTablaEnrutamientoLayout = new javax.swing.GroupLayout(jConfTablaEnrutamiento);
        jConfTablaEnrutamiento.setLayout(jConfTablaEnrutamientoLayout);
        jConfTablaEnrutamientoLayout.setHorizontalGroup(
            jConfTablaEnrutamientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jConfTablaEnrutamientoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jConfTablaEnrutamientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jConfTablaEnrutamientoLayout.createSequentialGroup()
                        .addComponent(btnCancelarEnrutamiento, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jConfTablaEnrutamientoLayout.createSequentialGroup()
                        .addComponent(jSPHostTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(jConfTablaEnrutamientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jConfTablaEnrutamientoLayout.createSequentialGroup()
                    .addGap(193, 193, 193)
                    .addComponent(btnAceptarEnrutamiento, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(194, Short.MAX_VALUE)))
        );
        jConfTablaEnrutamientoLayout.setVerticalGroup(
            jConfTablaEnrutamientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jConfTablaEnrutamientoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jConfTablaEnrutamientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSPHostTable, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(btnCancelarEnrutamiento, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jConfTablaEnrutamientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jConfTablaEnrutamientoLayout.createSequentialGroup()
                    .addContainerGap(373, Short.MAX_VALUE)
                    .addComponent(btnAceptarEnrutamiento, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jConfTablaEnrutamiento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jConfTablaEnrutamiento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAceptarEnrutamientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarEnrutamientoActionPerformed
        boolean allEnrutado = true;
        for (int i = 0; i < si.getSimulator().getRed().getAllHosts().size(); i++) {
            for (int j = 1; j <= si.getSimulator().getRed().getAllRouters().size(); j++) {
                if(jtHostTable.getValueAt(i, j) == null)
                allEnrutado = false;
            }
        }
        if(allEnrutado){
            this.vMain.setRouting(true);
            for (int i = 0; i < si.getSimulator().getRed().getAllHosts().size(); i++) {
                Vertex<Node> vc = getChildItem(jtHostTable.getValueAt(i, 0).toString());
                for (int j = 1; j <= si.getSimulator().getRed().getAllRouters().size(); j++) {
                    Vertex<Node> vh = getChildItem(jtHostTable.getColumnName(j).toString());
                    if(vh != null){
                        Router r = (Router) vh.getElement();
                        r.enrutar(vc, getLinkerItem((String) jtHostTable.getValueAt(i, j)));
                    }
                }
            }
            this.setVisible(false);
            this.vMain.getBtnStart().setEnabled(true);
            this.vMain.getBtnStartToFinish().setEnabled(!anyRandom);
            this.vMain.setVisible(true);
        }else{
            java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("app/Windows/Bundle");
            JOptionPane.showMessageDialog(this,bundle.getString("ErroEnrutamiento"),bundle.getString("ErroEnrutamientoTitulo"),JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAceptarEnrutamientoActionPerformed

    private void btnCancelarEnrutamientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarEnrutamientoActionPerformed
        boolean allEnrutado = true;
        for (int i = 0; i < si.getSimulator().getRed().getAllHosts().size(); i++) {
            for (int j = 1; j <= si.getSimulator().getRed().getAllRouters().size(); j++) {
                if(jtHostTable.getValueAt(i, j) == null)
                allEnrutado = false;
            }
        }
        this.setVisible(false);
        this.vMain.getBtnStart().setEnabled(allEnrutado);
        this.vMain.getBtnStartToFinish().setEnabled(!anyRandom && allEnrutado);
        this.vMain.setVisible(true);
    }//GEN-LAST:event_btnCancelarEnrutamientoActionPerformed

    private void btnEnrutamientoAutomaticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnrutamientoAutomaticoActionPerformed
        for(int j = 1; j <= si.getSimulator().getRed().getAllRouters().size(); j++){
            Vertex<Node> vr = getChildItem(jtHostTable.getColumnName(j).toString());
            for(int i = 0; i < si.getSimulator().getRed().getAllHosts().size(); i++){
                Vertex<Node> vh = getChildItem(jtHostTable.getValueAt(i, 0).toString());
                Edge<Linker> linker = this.si.getSimulator().getRed().getEnrutamiento(vh,vr);
                jtHostTable.setValueAt(linker.getElement().getIp(), i, j);
            }
        }
    }//GEN-LAST:event_btnEnrutamientoAutomaticoActionPerformed


    private Vertex<Node> getChildItem(String selectedItem) {
        for (NodeItem hi : this.si.getWorkSpacePanel()
                .getChildsItems()) {
            if (hi.getVertex().getElement().getName()
                    .equalsIgnoreCase(selectedItem)) {
                return hi.getVertex();
            }
        }
        return null;
    }

    private Edge<Linker> getLinkerItem(String selectedItem) {
        for (Edge<Linker> el : this.si.getSimulator().getRed().getRed().edges()) {
            if (el.getElement().getIp().equalsIgnoreCase(selectedItem)) {
                return el;
            }
        }
        return null;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptarEnrutamiento;
    private javax.swing.JButton btnCancelarEnrutamiento;
    private javax.swing.JButton btnEnrutamientoAutomatico;
    private javax.swing.JPanel jConfTablaEnrutamiento;
    private javax.swing.JScrollPane jSPHostTable;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTable jtHostTable;
    private app.Elements.WorkSpacePanel workSpacePanel1;
    // End of variables declaration//GEN-END:variables

    private void configComponents(boolean routing) {
        setLocation((getToolkit().getScreenSize().width - this.getWidth()) / 2,
                (getToolkit().getScreenSize().height - this.getHeight()) / 2);  
        if(routing){
            for(int j = 1; j <= si.getSimulator().getRed().getAllRouters().size(); j++){
            Vertex<Node> vr = getChildItem(jtHostTable.getColumnName(j).toString());
                if(vr != null){
                Router r = (Router) vr.getElement();
                    for(int m = 0; m < si.getSimulator().getRed().getAllHosts().size(); m++){
                        Vertex<Node> vh = getChildItem(jtHostTable.getValueAt(m, 0).toString());
                        if(vh != null){
                            String ip = r.getEnrutamiento(vh).getElement().getIp();
                            if(ip != null)
                                jtHostTable.setValueAt(ip, m, j);
                        }
                    }
                }
            }
        }
    }
    /*
    
    */
}
